/*
	Copyright 2017 Digital Learning Sciences (DLS) at the
	University Corporation for Atmospheric Research (UCAR),
	P.O. Box 3000, Boulder, CO 80307

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/
package org.dlese.dpc.schemedit;

import java.util.*;

import org.dlese.dpc.schemedit.*;
import org.dlese.dpc.schemedit.repository.RepositoryService;
import org.dlese.dpc.schemedit.dcs.DcsDataRecord;
import org.dlese.dpc.schemedit.dcs.StatusListener;
import org.dlese.dpc.schemedit.dcs.StatusEvent;
import org.dlese.dpc.schemedit.config.*;
import org.dlese.dpc.schemedit.standards.adn.AsnToAdnMapper;

import org.dlese.dpc.repository.RepositoryManager;
import org.dlese.dpc.index.reader.XMLDocReader;

import javax.servlet.ServletContext;

import org.dom4j.Document;

/**
 *  Listens for StatusChanged events generated by DcsDataManager via
 *  DcsDataRecord.updateStatus.
 *
 *@author     Jonathan Ostwald
 *@created    December 10, 2008
 *@version    $Id: WorkFlowServices.java,v 1.8 2009/03/20 23:33:55 jweather Exp $
 */
public class WorkFlowServices implements StatusListener {

	private static boolean debug = false;
	private ServletContext servletContext = null;


	/**
	 *  Constructor for the WorkFlowServices object
	 *
	 *@param  servletContext  NOT YET DOCUMENTED
	 */
	public WorkFlowServices(ServletContext servletContext) {
		this.servletContext = servletContext;
	}


	/**
	 *  Gets the repositoryManager attribute of the WorkFlowServices object
	 *
	 *@return    The repositoryManager value
	 */
	private RepositoryManager getRepositoryManager() {
		RepositoryManager rm = (RepositoryManager) servletContext.getAttribute("repositoryManager");
		if (rm == null) {
			prtln("WARNING: \'repositoryManager\' not found in servlet context");
		}
		return rm;
	}


	/**
	 *  Gets the metaDataFramework attribute of the WorkFlowServices object
	 *
	 *@param  xmlFormat  NOT YET DOCUMENTED
	 *@return            The metaDataFramework value
	 */
	protected MetaDataFramework getMetaDataFramework(String xmlFormat) {
		FrameworkRegistry reg = (FrameworkRegistry) servletContext.getAttribute("frameworkRegistry");
		if (reg != null) {
			return reg.getFramework(xmlFormat);
		} else {
			prtln("WARNING: \'frameworkRegistry\' not found in servlet context");
			return null;
		}
	}


	/**
	 *  StatusChanged even handler.
	 *
	 *@param  statusEvent  NOT YET DOCUMENTED
	 */
	public void statusChanged(StatusEvent statusEvent) {
		RepositoryManager rm = getRepositoryManager();
		DcsDataRecord dcsDataRecord = (DcsDataRecord) statusEvent.getSource();

		String currentStatus;

		String priorStatus;

		String statusNote;
		currentStatus = priorStatus = statusNote = "unknown";

		String collection;

		String xmlFormat;
		collection = xmlFormat = "unknown";

		String id = null;
		XMLDocReader docReader = null;

		prtln("received a statusEvent!");

		if (dcsDataRecord != null) {
			currentStatus = dcsDataRecord.getStatus();
			priorStatus = dcsDataRecord.getPriorStatus();
			statusNote = dcsDataRecord.getStatusNote();
			id = dcsDataRecord.getId();
		}

		if (id != null) {
			try {
				docReader = RepositoryService.getXMLDocReader(id, rm);
				collection = docReader.getCollection();
				xmlFormat = docReader.getNativeFormat();
			} catch (Exception e) {
				prtln("Unable to obtain docReader for changed record: " + e.getMessage());
			}
		}

		prtln("id: " + id);
		prtln("collection: " + collection);
		prtln("xmlFormat: " + xmlFormat);
		prtln("statusNote: " + statusNote);
		prtln("current status: " + currentStatus);
		prtln("prior status: " + priorStatus);


		// Do operations when status changes to FINAL
		if (currentStatus != null &&
				StatusFlags.isFinalStatusValue(currentStatus)) {
					
					
			/* This is where we USED to save assignments to casaaServer. Disabled
				when casaa was retired in  favor of CAT REST service. There should
				be an equivalent call if we want to restore this feature.
			*/		
			// saveContentStandardAssignments(docReader);
		}
	}


	/**
	 *  Save assigned standards to CAT service.<p>
	 *
	 *  NOTE: This is where we USED to save assignments to casaaServer. Disabled
	 *  when casaa was retired in favor of CAT REST service. There should be an
	 *  equivalent call if we want to restore this feature.
	 *
	 *@param  docReader  NOT YET DOCUMENTED
	 */
/* 	private void saveContentStandardAssignments(XMLDocReader docReader) {
		try {
			if (docReader == null) {
				throw new Exception("docReader is null");
			}
			String xmlFormat = docReader.getNativeFormat();
			MetaDataFramework framework = getMetaDataFramework(xmlFormat);
			if (framework == null) {
				throw new Exception("metadataFramework not found for \"" + xmlFormat + "\"");
			}
			if (framework.getStandardsManager() == null) {
				prtln("framework does not have nses4thLevelStandards - returning");
				return;
			}

			if (!docReader.getFile().exists()) {
				prtln("docReader could not obtain file");
			}

			Document doc = framework.getEditableDocument(docReader.getFile());
			
			StandardsSuggestionService casaaService =
					(StandardsSuggestionService) servletContext.getAttribute("casaaService");
			if (casaaService == null) {
				throw new Exception("\"casaaService\" not found in servletContext");
			}

			AsnToAdnMapper standardsMapper = (AsnToAdnMapper) servletContext.getAttribute("standardsMapper");
			if (standardsMapper == null) {
				throw new Exception("\"standardsMapper\" not found in servletContext");
			}

			CasaaServiceHelper.saveAssignments(doc, framework, casaaService, standardsMapper);
		} catch (Exception e) {
			prtln("Unable to save content standards: " + e.getMessage());
		} catch (Throwable t) {
			prtln("Unknown error trying to save content standards: " + t.getMessage());
			t.printStackTrace();
		}
	}
 */

	/**
	 *  Description of the Method
	 *
	 *@param  s  Description of the Parameter
	 */
	private static void prtln(String s) {
		if (debug) {
			System.out.println("WorkFlowServices: " + s);
		}
	}
}

